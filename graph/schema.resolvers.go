package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"github.com/oscargh945/go-crud-graphql/domain"
	"github.com/oscargh945/go-crud-graphql/domain/entities"
	"github.com/oscargh945/go-crud-graphql/graph/model"
	"github.com/oscargh945/go-crud-graphql/infrastructure"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input entities.CreateUserInput) (*entities.User, error) {
	if !domain.IsValidEmail(input.Email) {
		return nil, fmt.Errorf("Dirección de correo electrónico no válida")
	}
	if !domain.IsValidName(input.Name) {
		return nil, fmt.Errorf("El name agregado no es valido")
	}
	if !domain.IsValidPhone(input.Phone) {
		return nil, fmt.Errorf("El phone agregado no es valido")
	}
	user, err := r.UserUseCase.CreateUserUseCase(input)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*entities.User, error) {
	return r.UserUseCase.UpdateUserUseCase(id, input), nil
}

// SoftDeletedUser is the resolver for the softDeletedUser field.
func (r *mutationResolver) SoftDeletedUser(ctx context.Context, id string) (*model.DeleteUserResponse, error) {
	return r.UserUseCase.SoftDeleteUserUseCase(id), nil
}

// GetAllUsers is the resolver for the getAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context) ([]*entities.User, error) {
	users, err := r.UserUseCase.GetAllUsersUseCase()
	if err != nil {
		return nil, err
	}
	return users, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*entities.User, error) {
	user, err := r.UserUseCase.GetUserUseCase(id)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// PaginationSearchUsers is the resolver for the paginationSearchUsers field.
func (r *queryResolver) PaginationSearchUsers(ctx context.Context, searchUser *string, page *int, pageSize *int) ([]*entities.User, error) {
	if page == nil {
		defaultPage := 1
		page = &defaultPage
	}

	if pageSize == nil {
		defaultPageSize := 3
		pageSize = &defaultPageSize
	}

	if searchUser == nil {
		defaultSeachUser := ""
		searchUser = &defaultSeachUser
	}

	users, err := r.UserUseCase.PaginationSearchUsersUseCase(searchUser, page, pageSize)
	if err != nil {
		return nil, err
	}
	if len(users) == 0 {
		return nil, fmt.Errorf("No se encontraron usuarios")
	}
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

var db = infrastructure.Connect()
